<?php
namespace App\Controller;

use App\Controller\AppController;
use Google\Cloud\Translate\TranslateClient;
use App\Model\Entity\Translation;
use Hashids\Hashids;

/**
 * Translation Controller
 *
 *
 * @method \App\Model\Entity\Translation[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class TranslationController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    protected $translate;
    protected $hashid;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->translate = new TranslateClient([
            'projectId' => GG_TRAN_PR_ID,
            'key' => GG_API_KEY
        ]);
        $this->hashid = new Hashids(HASHID_STR, HASHID_NUM);
    }

    public function index()
    {

    }

    public function save()
    {
        $response = [];
        $content = $this->Translation->newEntity();
        $content = $this->Translation->patchEntity($content, $this->request->getData());
        if ($this->Translation->save($content)) {
            $response = [
                'result' => 1,
                'detail' => [
                    'id' => $this->hashid->encode($content->id),
                    'token' => $content->token
                ]
            ];
        } else {
            $response = [
                'result' => 0,
                'detail' => [
                    'error' => 'Save error!'
                ]
            ];
        }
        $this->set([
            'my_response' => $response,
            '_serialize' => 'my_response',
        ]);
        $this->RequestHandler->renderAs($this, 'json');
    }

    public function view()
    {
        $idDecode = $this->hashid->decode($this->request->getQuery('id'));
        $id = $idDecode[0];
        $token = $this->request->getQuery('token');
        $select = ['title', 'content', 'words'];
        $where = ['id' => $id, 'token' => $token];
        $result = $this->Translation->getInfo($select, $where);
        $this->set(compact('result'));
    }

    public function update()
    {
        $idDecode = $this->hashid->decode($this->request->getQuery('id'));
        $id = $idDecode[0];
        $translation = $this->Translation->get($id);
        $translation = $this->Translation->patchEntity($translation, $this->request->getData());
        if ($this->Translation->save($translation)) {
            $response = [
                'result' => 1,
                'detail' => [
                    'id' => $this->hashid->encode($translation->id),
                ]
            ];
        } else {
            $response = [
                'result' => 0,
                'detail' => [
                    'error' => 'Save error!'
                ]
            ];
        }
        $this->set([
            'my_response' => $response,
            '_serialize' => 'my_response',
        ]);
        $this->RequestHandler->renderAs($this, 'json');
    }
}
